{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pblworkflow"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "01_Subject_attributes",
								"type": "DatasetReference"
							},
							"name": "SA"
						},
						{
							"dataset": {
								"referenceName": "02_Life_independence",
								"type": "DatasetReference"
							},
							"name": "LI"
						},
						{
							"dataset": {
								"referenceName": "04_Inspection_results",
								"type": "DatasetReference"
							},
							"name": "IR"
						},
						{
							"dataset": {
								"referenceName": "05_evaluation",
								"type": "DatasetReference"
							},
							"name": "EV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "LISelected1"
						},
						{
							"name": "EVSelected1"
						}
					],
					"script": "source(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Housing complex'} as string,\n\t\t{ 'Gender'} as string,\n\t\t{ 'Birthday'} as string,\n\t\t{ 'Age'} as string,\n\t\t{ 'certification of care need'} as string,\n\t\t{ 'Number of residents'} as string,\n\t\t{ 'Height'} as string,\n\t\t{ 'Body weight'} as string,\n\t\t{ 'Stride（cm)'} as string,\n\t\t{ 'Medical history'} as string,\n\t\t{ 'Disease name'} as string,\n\t\t{ 'Regular hospital consultation'} as string,\n\t\t{ 'Antihypertensive'} as string,\n\t\t{ 'Other1'} as string,\n\t\t{ 'Smoking'} as string,\n\t\t{ 'Drinking'} as string,\n\t\t{ 'Family composition of living together'} as string,\n\t\t{  'Care need certification time'} as string,\n\t\t{ 'Hobby・preference・habit'} as string,\n\t\t{  'Activities'} as string,\n\t\t{ 'Community'} as string,\n\t\t{ 'Everyday'} as string,\n\t\t{ 'Everyday With or without blood pressure measurement'} as string,\n\t\t{ 'Whether or not to use a pedometer on a daily basis'} as string,\n\t\t{ 'Other2'} as string,\n\t\t{ 'right Measured value'} as string,\n\t\t{ 'right Evaluation'} as string,\n\t\t{ 'right Presence or absence of abnormality'} as string,\n\t\t{ 'left easured value'} as string,\n\t\t{ 'left Evaluation'} as string,\n\t\t{ 'left Presence or absence of abnormality'} as string,\n\t\t{ 'Locomotive Measured value'} as string,\n\t\t{ 'Locomotive Presence or absence of abnormality'                } as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SA\nsource(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Date confirmed'} as string,\n\t\t{ 'Appetite Questionnaire results'} as string,\n\t\t{'Eating habit Questionnaire results'} as string,\n\t\t{ 'Preference Questionnaire results'} as string,\n\t\t{ 'Sleep Questionnaire results'} as string,\n\t\t{'Anxiety about health Questionnaire results'} as string,\n\t\t{ 'Anxiety about forgetfulness Questionnaire results'} as string,\n\t\t{ 'I can go up and down stairs without being transmitted to the railing or wall'} as string,\n\t\t{ 'I can get up from the chair'} as string,\n\t\t{ 'I can walk for more than 15 minutes'} as string,\n\t\t{ 'I can walk without a cane'} as string,\n\t\t{ 'I am actively going out'} as string,\n\t\t{ 'Walking function Score'} as string,\n\t\t{ 'Walking function Evaluation'} as string,\n\t\t{ 'Do the cleaning and washing yourself'} as string,\n\t\t{ 'Shop for daily necessities yourself'} as string,\n\t\t{'I can prepare your own meals'} as string,\n\t\t{ 'I can write the documents to be submitted to the government office by myself'} as string,\n\t\t{ '自分で電話帳を調べ、電話をかけることができる'} as string,\n\t\t{ '生活機能 Score'} as string,\n\t\t{ '生活機能 Evaluation'} as string,\n\t\t{ 'I have a counselor in case of trouble'} as string,\n\t\t{ \"I have a counselor when I'm sick\"} as string,\n\t\t{ \"I have someone who will take me to the hospital when I'm sick\"} as string,\n\t\t{ 'There are people who take care of me when I fall asleep'} as string,\n\t\t{ 'Relying on someone'} as string,\n\t\t{ 'ソーシャルサポート Score'} as string,\n\t\t{ 'ソーシャルサポート Evaluation'} as string,\n\t\t{ 'No weight loss of more than 2-3 kg in the last 6 months'} as string,\n\t\t{ 'No weight gain of more than 2-3 kg in the last 2 months'} as string,\n\t\t{ 'I can eat hard food'} as string,\n\t\t{When I drink tea or soup, I don't get sick} as string,\n\t\t{I don't mind thirst} as string,\n\t\t{ '口腔・栄養 Score'} as string,\n\t\t{ '口腔・栄養 Evaluation'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> LI\nsource(output(\n\t\t{'No'} as string,\n\t\t{ 'SubjectID'} as string,\n\t\t{ 'Presence or absence of inspection record'} as string,\n\t\t{ 'Inspection date'} as string,\n\t\t{ 'Total cholesterol'} as string,\n\t\t{ 'LDL cholesterol'} as string,\n\t\t{ 'HDL cholesterol'} as string,\n\t\t{ 'Urea nitrogen'} as string,\n\t\t{ 'Creatinine'} as string,\n\t\t{ 'Uric acid'} as string,\n\t\t{ 'Urine protein'} as string,\n\t\t{ 'Blood sugar'} as string,\n\t\t{ 'Diabetes diagnosis age'} as string,\n\t\t{ 'HbA1c'} as string,\n\t\t{ 'AST'} as string,\n\t\t{ 'ALT'} as string,\n\t\t{ 'LDH'} as string,\n\t\t{ 'Retinopathy'} as string,\n\t\t{ 'Hypertension diagnosis age sodium'} as string,\n\t\t{ 'Na'} as string,\n\t\t{ 'K'} as string,\n\t\t{ 'ECG abnormalities'} as string,\n\t\t{ 'Triglyceride'} as string,\n\t\t{ 'Diagnosis age of dyslipidemia'} as string,\n\t\t{ 'History of coronary artery disease'} as string,\n\t\t{ 'Chronic kidney disease diagnosis age'} as string,\n\t\t{ 'Total protein'} as string,\n\t\t{ 'Albumin'} as string,\n\t\t{ 'Hematuria'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> IR\nsource(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Evaluation contents'} as string,\n\t\t{ 'Health status'} as string,\n\t\t{ 'Biological function'} as string,\n\t\t{ 'Exercise function'} as string,\n\t\t{ 'Nutrition'} as string,\n\t\t{ 'Cognitive function'} as string,\n\t\t{ 'Fall'} as string,\n\t\t{ 'High blood pressure'} as string,\n\t\t{ 'Arrhythmia'} as string,\n\t\t{ 'Osteoporosis'} as string,\n\t\t{ 'Diabetes mellitus'} as string,\n\t\t{ 'Exercise guidance'} as string,\n\t\t{ 'Nutrition guidance'} as string,\n\t\t{'Life guidance'} as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EV\nLISelected1, EVSelected1 join(LISelected1@{'SubjectID'} == EVSelected1@{'SubjectID'},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nLI select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Appetite Questionnaire results'},\n\t\t{'Eating habit Questionnaire results'},\n\t\t{ 'Preference Questionnaire results'},\n\t\t{ 'Sleep Questionnaire results'},\n\t\t{'Anxiety about health Questionnaire results'},\n\t\t{ 'I can go up and down stairs without being transmitted to the railing or wall'},\n\t\t{ 'I can walk for more than 15 minutes'},\n\t\t{ 'I am actively going out'},\n\t\t{ 'Do the cleaning and washing yourself'},\n\t\t{ 'Shop for daily necessities yourself'},\n\t\t{ 'No weight loss of more than 2-3 kg in the last 6 months'},\n\t\t{ 'No weight gain of more than 2-3 kg in the last 2 months'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LISelected1\nEV select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Exercise function'},\n\t\t{ 'Nutrition'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EVSelected1\nJoin1 sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		}
	]
}