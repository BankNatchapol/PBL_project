{
	"name": "dataflow6",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "weight",
						"type": "DatasetReference"
					},
					"name": "weight"
				},
				{
					"dataset": {
						"referenceName": "sa_01",
						"type": "DatasetReference"
					},
					"name": "sa01"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "person",
						"type": "DatasetReference"
					},
					"name": "person"
				},
				{
					"dataset": {
						"referenceName": "time_info",
						"type": "DatasetReference"
					},
					"name": "timeInfo"
				}
			],
			"transformations": [
				{
					"name": "Select1"
				},
				{
					"name": "Select2"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Select3"
				},
				{
					"name": "Select4"
				}
			],
			"script": "source(output(\n\t\tdevice as string,\n\t\t{ serialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Body Fat Percentage} as string,\n\t\t{ Basal Metabolism} as string,\n\t\t{ Skeletal Muscle Percentage} as string,\n\t\t{ Weight} as string,\n\t\t{ BMI} as string,\n\t\t{ Visceral Fat Level} as string,\n\t\t{ Body Age} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> weight\nsource(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Housing complex'} as string,\n\t\t{ 'Gender'} as string,\n\t\t{ 'Birthday'} as string,\n\t\t{ 'Age'} as string,\n\t\t{ 'certification of care need'} as string,\n\t\t{ 'Number of residents'} as string,\n\t\t{ 'Height'} as string,\n\t\t{ 'Body weight'} as string,\n\t\t{ 'Stride（cm)'} as string,\n\t\t{ 'Medical history'} as string,\n\t\t{ 'Disease name'} as string,\n\t\t{ 'Regular hospital consultation'} as string,\n\t\t{ 'Antihypertensive'} as string,\n\t\t{ 'Other1'} as string,\n\t\t{ 'Smoking'} as string,\n\t\t{ 'Drinking'} as string,\n\t\t{ 'Family composition of living together'} as string,\n\t\t{  'Care need certification time'} as string,\n\t\t{ 'Hobby・preference・habit'} as string,\n\t\t{  'Activities'} as string,\n\t\t{ 'Community'} as string,\n\t\t{ 'Everyday'} as string,\n\t\t{ 'Everyday With or without blood pressure measurement'} as string,\n\t\t{ 'Whether or not to use a pedometer on a daily basis'} as string,\n\t\t{ 'Other2'} as string,\n\t\t{ 'right Measured value'} as string,\n\t\t{ 'right Evaluation'} as string,\n\t\t{ 'right Presence or absence of abnormality'} as string,\n\t\t{ 'left easured value'} as string,\n\t\t{ 'left Evaluation'} as string,\n\t\t{ 'left Presence or absence of abnormality'} as string,\n\t\t{ 'Locomotive Measured value'} as string,\n\t\t{ 'Locomotive Presence or absence of abnormality'                } as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sa01\nweight select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ BMI},\n\t\t{ Body Age},\n\t\tSubjectID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsa01 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Gender'},\n\t\t{ 'Age'},\n\t\t{ 'Height'},\n\t\t{ 'Body weight'},\n\t\t{ 'Smoking'},\n\t\t{ 'Drinking'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Select2 join(SubjectID == {'SubjectID'},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ BMI},\n\t\t{ Body Age},\n\t\tSubjectID,\n\t\t{ 'Gender'},\n\t\t{ 'Age'},\n\t\t{ 'Height'},\n\t\t{ 'Body weight'},\n\t\t{ 'Smoking'},\n\t\t{ 'Drinking'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> person\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo"
		}
	}
}