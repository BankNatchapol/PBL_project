{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzureBlobStorage1": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "li_02",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "li_02",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "li_02",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "ev_05",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ev_05",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ev_05",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "behavior",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "li_02",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ev_05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "sa_01",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sa_01",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "sa_01",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "medicine_info",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "sa_01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ir_04",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ir_04",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ir_04",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "weight",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "weight",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "weight",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "internal_health_info",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ir_04",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "weight",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "sphy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sphy",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "sphy",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "blood_info",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "sphy",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ir_04",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "disease_info",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ev_05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow5",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "person",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "sa_01",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "weight",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow6",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "sleep_info",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "li_02",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "active",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow7",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "active",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "active",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "active",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "exist",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "exist",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "exist",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "time_info",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "exist",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "active",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "blood_info",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "person",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sleep_info",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "internal_health_info",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sphy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow8",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-28T08:21:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/li_02')]",
				"[concat(variables('factoryId'), '/datasets/ev_05')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/sa_01')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]",
				"[concat(variables('factoryId'), '/datasets/ir_04')]",
				"[concat(variables('factoryId'), '/datasets/weight')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]",
				"[concat(variables('factoryId'), '/datasets/sphy')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow4')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow5')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow6')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow7')]",
				"[concat(variables('factoryId'), '/datasets/active')]",
				"[concat(variables('factoryId'), '/datasets/exist')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/li_02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "02_Life_independence.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "'No'",
						"type": "String"
					},
					{
						"name": "'SubjectID'",
						"type": "String"
					},
					{
						"name": " 'Date confirmed'",
						"type": "String"
					},
					{
						"name": " 'Appetite Questionnaire results'",
						"type": "String"
					},
					{
						"name": "'Eating habit Questionnaire results'",
						"type": "String"
					},
					{
						"name": " 'Preference Questionnaire results'",
						"type": "String"
					},
					{
						"name": " 'Sleep Questionnaire results'",
						"type": "String"
					},
					{
						"name": "'Anxiety about health Questionnaire results'",
						"type": "String"
					},
					{
						"name": " 'Anxiety about forgetfulness Questionnaire results'",
						"type": "String"
					},
					{
						"name": " 'I can go up and down stairs without being transmitted to the railing or wall'",
						"type": "String"
					},
					{
						"name": " 'I can get up from the chair'",
						"type": "String"
					},
					{
						"name": " 'I can walk for more than 15 minutes'",
						"type": "String"
					},
					{
						"name": " 'I can walk without a cane'",
						"type": "String"
					},
					{
						"name": " 'I am actively going out'",
						"type": "String"
					},
					{
						"name": " 'Walking function Score'",
						"type": "String"
					},
					{
						"name": " 'Walking function Evaluation'",
						"type": "String"
					},
					{
						"name": " 'Do the cleaning and washing yourself'",
						"type": "String"
					},
					{
						"name": " 'Shop for daily necessities yourself'",
						"type": "String"
					},
					{
						"name": "'I can prepare your own meals'",
						"type": "String"
					},
					{
						"name": " 'I can write the documents to be submitted to the government office by myself'",
						"type": "String"
					},
					{
						"name": " '自分で電話帳を調べ、電話をかけることができる'",
						"type": "String"
					},
					{
						"name": " '生活機能 Score'",
						"type": "String"
					},
					{
						"name": " '生活機能 Evaluation'",
						"type": "String"
					},
					{
						"name": " 'I have a counselor in case of trouble'",
						"type": "String"
					},
					{
						"name": " \"I have a counselor when I'm sick\"",
						"type": "String"
					},
					{
						"name": " \"I have someone who will take me to the hospital when I'm sick\"",
						"type": "String"
					},
					{
						"name": " 'There are people who take care of me when I fall asleep'",
						"type": "String"
					},
					{
						"name": " 'Relying on someone'",
						"type": "String"
					},
					{
						"name": " 'ソーシャルサポート Score'",
						"type": "String"
					},
					{
						"name": " 'ソーシャルサポート Evaluation'",
						"type": "String"
					},
					{
						"name": " 'No weight loss of more than 2-3 kg in the last 6 months'",
						"type": "String"
					},
					{
						"name": " 'No weight gain of more than 2-3 kg in the last 2 months'",
						"type": "String"
					},
					{
						"name": " 'I can eat hard food'",
						"type": "String"
					},
					{
						"name": "When I drink tea or soup, I don't get sick",
						"type": "String"
					},
					{
						"name": "I don't mind thirst",
						"type": "String"
					},
					{
						"name": " '口腔・栄養 Score'",
						"type": "String"
					},
					{
						"name": " '口腔・栄養 Evaluation'",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ev_05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "05_evaluation.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "'No'",
						"type": "String"
					},
					{
						"name": "'SubjectID'",
						"type": "String"
					},
					{
						"name": " 'Health status'",
						"type": "String"
					},
					{
						"name": " 'Biological function'",
						"type": "String"
					},
					{
						"name": " 'Exercise function'",
						"type": "String"
					},
					{
						"name": " 'Nutrition'",
						"type": "String"
					},
					{
						"name": " 'Cognitive function'",
						"type": "String"
					},
					{
						"name": " 'Fall'",
						"type": "String"
					},
					{
						"name": " 'High blood pressure'",
						"type": "String"
					},
					{
						"name": " 'Arrhythmia'",
						"type": "String"
					},
					{
						"name": " 'Osteoporosis'",
						"type": "String"
					},
					{
						"name": " 'Diabetes mellitus'",
						"type": "String"
					},
					{
						"name": " 'Exercise guidance'",
						"type": "String"
					},
					{
						"name": " 'Nutrition guidance'",
						"type": "String"
					},
					{
						"name": "'Life guidance'",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "li_02",
								"type": "DatasetReference"
							},
							"name": "li02"
						},
						{
							"dataset": {
								"referenceName": "ev_05",
								"type": "DatasetReference"
							},
							"name": "ev05"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "behavior",
								"type": "DatasetReference"
							},
							"name": "behavior"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						}
					],
					"script": "source(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Date confirmed'} as string,\n\t\t{ 'Appetite Questionnaire results'} as string,\n\t\t{'Eating habit Questionnaire results'} as string,\n\t\t{ 'Preference Questionnaire results'} as string,\n\t\t{ 'Sleep Questionnaire results'} as string,\n\t\t{'Anxiety about health Questionnaire results'} as string,\n\t\t{ 'Anxiety about forgetfulness Questionnaire results'} as string,\n\t\t{ 'I can go up and down stairs without being transmitted to the railing or wall'} as string,\n\t\t{ 'I can get up from the chair'} as string,\n\t\t{ 'I can walk for more than 15 minutes'} as string,\n\t\t{ 'I can walk without a cane'} as string,\n\t\t{ 'I am actively going out'} as string,\n\t\t{ 'Walking function Score'} as string,\n\t\t{ 'Walking function Evaluation'} as string,\n\t\t{ 'Do the cleaning and washing yourself'} as string,\n\t\t{ 'Shop for daily necessities yourself'} as string,\n\t\t{'I can prepare your own meals'} as string,\n\t\t{ 'I can write the documents to be submitted to the government office by myself'} as string,\n\t\t{ '自分で電話帳を調べ、電話をかけることができる'} as string,\n\t\t{ '生活機能 Score'} as string,\n\t\t{ '生活機能 Evaluation'} as string,\n\t\t{ 'I have a counselor in case of trouble'} as string,\n\t\t{ \"I have a counselor when I'm sick\"} as string,\n\t\t{ \"I have someone who will take me to the hospital when I'm sick\"} as string,\n\t\t{ 'There are people who take care of me when I fall asleep'} as string,\n\t\t{ 'Relying on someone'} as string,\n\t\t{ 'ソーシャルサポート Score'} as string,\n\t\t{ 'ソーシャルサポート Evaluation'} as string,\n\t\t{ 'No weight loss of more than 2-3 kg in the last 6 months'} as string,\n\t\t{ 'No weight gain of more than 2-3 kg in the last 2 months'} as string,\n\t\t{ 'I can eat hard food'} as string,\n\t\t{When I drink tea or soup, I don't get sick} as string,\n\t\t{I don't mind thirst} as string,\n\t\t{ '口腔・栄養 Score'} as string,\n\t\t{ '口腔・栄養 Evaluation'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> li02\nsource(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Health status'} as string,\n\t\t{ 'Biological function'} as string,\n\t\t{ 'Exercise function'} as string,\n\t\t{ 'Nutrition'} as string,\n\t\t{ 'Cognitive function'} as string,\n\t\t{ 'Fall'} as string,\n\t\t{ 'High blood pressure'} as string,\n\t\t{ 'Arrhythmia'} as string,\n\t\t{ 'Osteoporosis'} as string,\n\t\t{ 'Diabetes mellitus'} as string,\n\t\t{ 'Exercise guidance'} as string,\n\t\t{ 'Nutrition guidance'} as string,\n\t\t{'Life guidance'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ev05\nli02 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Appetite Questionnaire results'},\n\t\t{ 'Preference Questionnaire results'},\n\t\t{ 'Sleep Questionnaire results'},\n\t\t{'Anxiety about health Questionnaire results'},\n\t\t{ 'I can go up and down stairs without being transmitted to the railing or wall'},\n\t\t{ 'I can walk for more than 15 minutes'},\n\t\t{ 'I am actively going out'},\n\t\t{ 'Do the cleaning and washing yourself'},\n\t\t{ 'Shop for daily necessities yourself'},\n\t\t{ 'No weight loss of more than 2-3 kg in the last 6 months'},\n\t\t{ 'No weight gain of more than 2-3 kg in the last 2 months'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nev05 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Exercise function'},\n\t\t{ 'Nutrition'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Select2 join(Select1@{'SubjectID'} == Select2@{'SubjectID'},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{'SubjectID'} = Select1@{'SubjectID'},\n\t\t{ 'Appetite Questionnaire results'},\n\t\t{ 'Preference Questionnaire results'},\n\t\t{ 'Sleep Questionnaire results'},\n\t\t{'Anxiety about health Questionnaire results'},\n\t\t{ 'I can go up and down stairs without being transmitted to the railing or wall'},\n\t\t{ 'I can walk for more than 15 minutes'},\n\t\t{ 'I am actively going out'},\n\t\t{ 'Do the cleaning and washing yourself'},\n\t\t{ 'Shop for daily necessities yourself'},\n\t\t{ 'No weight loss of more than 2-3 kg in the last 6 months'},\n\t\t{ 'No weight gain of more than 2-3 kg in the last 2 months'},\n\t\t{'SubjectID'} = Select2@{'SubjectID'},\n\t\t{ 'Exercise function'},\n\t\t{ 'Nutrition'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> behavior"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/li_02')]",
				"[concat(variables('factoryId'), '/datasets/ev_05')]",
				"[concat(variables('factoryId'), '/datasets/behavior')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sa_01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "01_Subject_attributes.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "'No'",
						"type": "String"
					},
					{
						"name": "'SubjectID'",
						"type": "String"
					},
					{
						"name": " 'Housing complex'",
						"type": "String"
					},
					{
						"name": " 'Gender'",
						"type": "String"
					},
					{
						"name": " 'Birthday'",
						"type": "String"
					},
					{
						"name": " 'Age'",
						"type": "String"
					},
					{
						"name": " 'certification of care need'",
						"type": "String"
					},
					{
						"name": " 'Number of residents'",
						"type": "String"
					},
					{
						"name": " 'Height'",
						"type": "String"
					},
					{
						"name": " 'Body weight'",
						"type": "String"
					},
					{
						"name": " 'Stride（cm)'",
						"type": "String"
					},
					{
						"name": " 'Medical history'",
						"type": "String"
					},
					{
						"name": " 'Disease name'",
						"type": "String"
					},
					{
						"name": " 'Regular hospital consultation'",
						"type": "String"
					},
					{
						"name": " 'Antihypertensive'",
						"type": "String"
					},
					{
						"name": " 'Other1'",
						"type": "String"
					},
					{
						"name": " 'Smoking'",
						"type": "String"
					},
					{
						"name": " 'Drinking'",
						"type": "String"
					},
					{
						"name": " 'Family composition of living together'",
						"type": "String"
					},
					{
						"name": "  'Care need certification time'",
						"type": "String"
					},
					{
						"name": " 'Hobby・preference・habit'",
						"type": "String"
					},
					{
						"name": "  'Activities'",
						"type": "String"
					},
					{
						"name": " 'Community'",
						"type": "String"
					},
					{
						"name": " 'Everyday'",
						"type": "String"
					},
					{
						"name": " 'Everyday With or without blood pressure measurement'",
						"type": "String"
					},
					{
						"name": " 'Whether or not to use a pedometer on a daily basis'",
						"type": "String"
					},
					{
						"name": " 'Other2'",
						"type": "String"
					},
					{
						"name": " 'right Measured value'",
						"type": "String"
					},
					{
						"name": " 'right Evaluation'",
						"type": "String"
					},
					{
						"name": " 'right Presence or absence of abnormality'",
						"type": "String"
					},
					{
						"name": " 'left easured value'",
						"type": "String"
					},
					{
						"name": " 'left Evaluation'",
						"type": "String"
					},
					{
						"name": " 'left Presence or absence of abnormality'",
						"type": "String"
					},
					{
						"name": " 'Locomotive Measured value'",
						"type": "String"
					},
					{
						"name": " 'Locomotive Presence or absence of abnormality'                ",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sa_01",
								"type": "DatasetReference"
							},
							"name": "sa01"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "medicine_info",
								"type": "DatasetReference"
							},
							"name": "medicineInfo"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Housing complex'} as string,\n\t\t{ 'Gender'} as string,\n\t\t{ 'Birthday'} as string,\n\t\t{ 'Age'} as string,\n\t\t{ 'certification of care need'} as string,\n\t\t{ 'Number of residents'} as string,\n\t\t{ 'Height'} as string,\n\t\t{ 'Body weight'} as string,\n\t\t{ 'Stride（cm)'} as string,\n\t\t{ 'Medical history'} as string,\n\t\t{ 'Disease name'} as string,\n\t\t{ 'Regular hospital consultation'} as string,\n\t\t{ 'Antihypertensive'} as string,\n\t\t{ 'Other1'} as string,\n\t\t{ 'Smoking'} as string,\n\t\t{ 'Drinking'} as string,\n\t\t{ 'Family composition of living together'} as string,\n\t\t{  'Care need certification time'} as string,\n\t\t{ 'Hobby・preference・habit'} as string,\n\t\t{  'Activities'} as string,\n\t\t{ 'Community'} as string,\n\t\t{ 'Everyday'} as string,\n\t\t{ 'Everyday With or without blood pressure measurement'} as string,\n\t\t{ 'Whether or not to use a pedometer on a daily basis'} as string,\n\t\t{ 'Other2'} as string,\n\t\t{ 'right Measured value'} as string,\n\t\t{ 'right Evaluation'} as string,\n\t\t{ 'right Presence or absence of abnormality'} as string,\n\t\t{ 'left easured value'} as string,\n\t\t{ 'left Evaluation'} as string,\n\t\t{ 'left Presence or absence of abnormality'} as string,\n\t\t{ 'Locomotive Measured value'} as string,\n\t\t{ 'Locomotive Presence or absence of abnormality'                } as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sa01\nsa01 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Antihypertensive'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> medicineInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sa_01')]",
				"[concat(variables('factoryId'), '/datasets/medicine_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ir_04')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "04_Inspection results.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "'No'",
						"type": "String"
					},
					{
						"name": " 'SubjectID'",
						"type": "String"
					},
					{
						"name": " 'Presence or absence of inspection record'",
						"type": "String"
					},
					{
						"name": " 'Inspection date'",
						"type": "String"
					},
					{
						"name": " 'Total cholesterol'",
						"type": "String"
					},
					{
						"name": " 'LDL cholesterol'",
						"type": "String"
					},
					{
						"name": " 'HDL cholesterol'",
						"type": "String"
					},
					{
						"name": " 'Urea nitrogen'",
						"type": "String"
					},
					{
						"name": " 'Creatinine'",
						"type": "String"
					},
					{
						"name": " 'Uric acid'",
						"type": "String"
					},
					{
						"name": " 'Urine protein'",
						"type": "String"
					},
					{
						"name": " 'Blood sugar'",
						"type": "String"
					},
					{
						"name": " 'Diabetes diagnosis age'",
						"type": "String"
					},
					{
						"name": " 'HbA1c'",
						"type": "String"
					},
					{
						"name": " 'AST'",
						"type": "String"
					},
					{
						"name": " 'ALT'",
						"type": "String"
					},
					{
						"name": " 'LDH'",
						"type": "String"
					},
					{
						"name": " 'Retinopathy'",
						"type": "String"
					},
					{
						"name": " 'Hypertension diagnosis age sodium'",
						"type": "String"
					},
					{
						"name": " 'Na'",
						"type": "String"
					},
					{
						"name": " 'K'",
						"type": "String"
					},
					{
						"name": " 'ECG abnormalities'",
						"type": "String"
					},
					{
						"name": " 'Triglyceride'",
						"type": "String"
					},
					{
						"name": " 'Diagnosis age of dyslipidemia'",
						"type": "String"
					},
					{
						"name": " 'History of coronary artery disease'",
						"type": "String"
					},
					{
						"name": " 'Chronic kidney disease diagnosis age'",
						"type": "String"
					},
					{
						"name": " 'Total protein'",
						"type": "String"
					},
					{
						"name": " 'Albumin'",
						"type": "String"
					},
					{
						"name": " 'Hematuria'",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weight')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "71_sensing_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "weight.csv",
						"folderPath": "71_sensing_data",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "device",
						"type": "String"
					},
					{
						"name": " serialNo",
						"type": "String"
					},
					{
						"name": " Battery Level",
						"type": "String"
					},
					{
						"name": " Measure Date Time",
						"type": "String"
					},
					{
						"name": " Body Fat Percentage",
						"type": "String"
					},
					{
						"name": " Basal Metabolism",
						"type": "String"
					},
					{
						"name": " Skeletal Muscle Percentage",
						"type": "String"
					},
					{
						"name": " Weight",
						"type": "String"
					},
					{
						"name": " BMI",
						"type": "String"
					},
					{
						"name": " Visceral Fat Level",
						"type": "String"
					},
					{
						"name": " Body Age",
						"type": "String"
					},
					{
						"name": "SubjectID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ir_04",
								"type": "DatasetReference"
							},
							"name": "ir04"
						},
						{
							"dataset": {
								"referenceName": "weight",
								"type": "DatasetReference"
							},
							"name": "weight"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "internal_health_info",
								"type": "DatasetReference"
							},
							"name": "internalHealthInfo"
						},
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						}
					],
					"script": "source(output(\n\t\t{'No'} as string,\n\t\t{ 'SubjectID'} as string,\n\t\t{ 'Presence or absence of inspection record'} as string,\n\t\t{ 'Inspection date'} as string,\n\t\t{ 'Total cholesterol'} as string,\n\t\t{ 'LDL cholesterol'} as string,\n\t\t{ 'HDL cholesterol'} as string,\n\t\t{ 'Urea nitrogen'} as string,\n\t\t{ 'Creatinine'} as string,\n\t\t{ 'Uric acid'} as string,\n\t\t{ 'Urine protein'} as string,\n\t\t{ 'Blood sugar'} as string,\n\t\t{ 'Diabetes diagnosis age'} as string,\n\t\t{ 'HbA1c'} as string,\n\t\t{ 'AST'} as string,\n\t\t{ 'ALT'} as string,\n\t\t{ 'LDH'} as string,\n\t\t{ 'Retinopathy'} as string,\n\t\t{ 'Hypertension diagnosis age sodium'} as string,\n\t\t{ 'Na'} as string,\n\t\t{ 'K'} as string,\n\t\t{ 'ECG abnormalities'} as string,\n\t\t{ 'Triglyceride'} as string,\n\t\t{ 'Diagnosis age of dyslipidemia'} as string,\n\t\t{ 'History of coronary artery disease'} as string,\n\t\t{ 'Chronic kidney disease diagnosis age'} as string,\n\t\t{ 'Total protein'} as string,\n\t\t{ 'Albumin'} as string,\n\t\t{ 'Hematuria'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ir04\nsource(output(\n\t\tdevice as string,\n\t\t{ serialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Body Fat Percentage} as string,\n\t\t{ Basal Metabolism} as string,\n\t\t{ Skeletal Muscle Percentage} as string,\n\t\t{ Weight} as string,\n\t\t{ BMI} as string,\n\t\t{ Visceral Fat Level} as string,\n\t\t{ Body Age} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> weight\nir04 select(mapColumn(\n\t\t{ 'SubjectID'},\n\t\t{ 'Inspection date'},\n\t\t{ 'Total cholesterol'},\n\t\t{ 'LDL cholesterol'},\n\t\t{ 'HDL cholesterol'},\n\t\t{ 'HbA1c'},\n\t\t{ 'AST'},\n\t\t{ 'ALT'},\n\t\t{ 'LDH'},\n\t\t{ 'Na'},\n\t\t{ 'K'},\n\t\t{ 'ECG abnormalities'},\n\t\t{ 'History of coronary artery disease'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nweight select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ Body Fat Percentage},\n\t\t{ Basal Metabolism},\n\t\tSubjectID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2, Select1 join(SubjectID == { 'SubjectID'},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ Body Fat Percentage},\n\t\t{ Basal Metabolism},\n\t\tSubjectID,\n\t\t{ 'Inspection date'},\n\t\t{ 'Total cholesterol'},\n\t\t{ 'LDL cholesterol'},\n\t\t{ 'HDL cholesterol'},\n\t\t{ 'HbA1c'},\n\t\t{ 'AST'},\n\t\t{ 'ALT'},\n\t\t{ 'LDH'},\n\t\t{ 'Na'},\n\t\t{ 'K'},\n\t\t{ 'ECG abnormalities'},\n\t\t{ 'History of coronary artery disease'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> internalHealthInfo\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ir_04')]",
				"[concat(variables('factoryId'), '/datasets/weight')]",
				"[concat(variables('factoryId'), '/datasets/internal_health_info')]",
				"[concat(variables('factoryId'), '/datasets/time_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sphy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "71_sensing_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sphy.csv",
						"folderPath": "71_sensing_data",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Device",
						"type": "String"
					},
					{
						"name": " SerialNo",
						"type": "String"
					},
					{
						"name": " Battery Level",
						"type": "String"
					},
					{
						"name": " Measure Date Time",
						"type": "String"
					},
					{
						"name": " Systolic Pressure",
						"type": "String"
					},
					{
						"name": " Diastolic Pressure",
						"type": "String"
					},
					{
						"name": " Mean Arterial Pressure",
						"type": "String"
					},
					{
						"name": " Pulse Rate",
						"type": "String"
					},
					{
						"name": " Irregular Pulse Flag",
						"type": "String"
					},
					{
						"name": " Pulse Rate Range Detection Flag",
						"type": "String"
					},
					{
						"name": "SubjectID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sphy",
								"type": "DatasetReference"
							},
							"name": "sphy"
						},
						{
							"dataset": {
								"referenceName": "ir_04",
								"type": "DatasetReference"
							},
							"name": "ir04"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blood_info",
								"type": "DatasetReference"
							},
							"name": "bloodInfo"
						},
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						}
					],
					"script": "source(output(\n\t\tDevice as string,\n\t\t{ SerialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Systolic Pressure} as string,\n\t\t{ Diastolic Pressure} as string,\n\t\t{ Mean Arterial Pressure} as string,\n\t\t{ Pulse Rate} as string,\n\t\t{ Irregular Pulse Flag} as string,\n\t\t{ Pulse Rate Range Detection Flag} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sphy\nsource(output(\n\t\t{'No'} as short,\n\t\t{ 'SubjectID'} as string,\n\t\t{ 'Presence or absence of inspection record'} as string,\n\t\t{ 'Inspection date'} as date,\n\t\t{ 'Total cholesterol'} as string,\n\t\t{ 'LDL cholesterol'} as string,\n\t\t{ 'HDL cholesterol'} as string,\n\t\t{ 'Urea nitrogen'} as string,\n\t\t{ 'Creatinine'} as short,\n\t\t{ 'Uric acid'} as string,\n\t\t{ 'Urine protein'} as string,\n\t\t{ 'Blood sugar'} as short,\n\t\t{ 'Diabetes diagnosis age'} as string,\n\t\t{ 'HbA1c'} as string,\n\t\t{ 'AST'} as string,\n\t\t{ 'ALT'} as string,\n\t\t{ 'LDH'} as string,\n\t\t{ 'Retinopathy'} as string,\n\t\t{ 'Hypertension diagnosis age sodium'} as string,\n\t\t{ 'Na'} as string,\n\t\t{ 'K'} as string,\n\t\t{ 'ECG abnormalities'} as string,\n\t\t{ 'Triglyceride'} as string,\n\t\t{ 'Diagnosis age of dyslipidemia'} as string,\n\t\t{ 'History of coronary artery disease'} as string,\n\t\t{ 'Chronic kidney disease diagnosis age'} as string,\n\t\t{ 'Total protein'} as string,\n\t\t{ 'Albumin'} as string,\n\t\t{ 'Hematuria'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ir04\nsphy select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ Systolic Pressure},\n\t\t{ Diastolic Pressure},\n\t\t{ Mean Arterial Pressure},\n\t\t{ Pulse Rate},\n\t\t{ Irregular Pulse Flag},\n\t\t{ Pulse Rate Range Detection Flag},\n\t\tSubjectID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nir04 select(mapColumn(\n\t\t{ 'SubjectID'},\n\t\t{ 'Blood sugar'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Select2 join(SubjectID == { 'SubjectID'},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ Systolic Pressure},\n\t\t{ Diastolic Pressure},\n\t\t{ Mean Arterial Pressure},\n\t\t{ Pulse Rate},\n\t\t{ Irregular Pulse Flag},\n\t\t{ Pulse Rate Range Detection Flag},\n\t\tSubjectID,\n\t\t{ 'Blood sugar'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> bloodInfo\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sphy')]",
				"[concat(variables('factoryId'), '/datasets/ir_04')]",
				"[concat(variables('factoryId'), '/datasets/blood_info')]",
				"[concat(variables('factoryId'), '/datasets/time_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ev_05",
								"type": "DatasetReference"
							},
							"name": "ev05"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "disease_info",
								"type": "DatasetReference"
							},
							"name": "diseaseInfo"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Health status'} as string,\n\t\t{ 'Biological function'} as string,\n\t\t{ 'Exercise function'} as string,\n\t\t{ 'Nutrition'} as string,\n\t\t{ 'Cognitive function'} as string,\n\t\t{ 'Fall'} as string,\n\t\t{ 'High blood pressure'} as string,\n\t\t{ 'Arrhythmia'} as string,\n\t\t{ 'Osteoporosis'} as string,\n\t\t{ 'Diabetes mellitus'} as string,\n\t\t{ 'Exercise guidance'} as string,\n\t\t{ 'Nutrition guidance'} as string,\n\t\t{'Life guidance'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ev05\nev05 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Arrhythmia'},\n\t\t{ 'Diabetes mellitus'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> diseaseInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ev_05')]",
				"[concat(variables('factoryId'), '/datasets/disease_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow6')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "weight",
								"type": "DatasetReference"
							},
							"name": "weight"
						},
						{
							"dataset": {
								"referenceName": "sa_01",
								"type": "DatasetReference"
							},
							"name": "sa01"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "person",
								"type": "DatasetReference"
							},
							"name": "person"
						},
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						}
					],
					"script": "source(output(\n\t\tdevice as string,\n\t\t{ serialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Body Fat Percentage} as string,\n\t\t{ Basal Metabolism} as string,\n\t\t{ Skeletal Muscle Percentage} as string,\n\t\t{ Weight} as string,\n\t\t{ BMI} as string,\n\t\t{ Visceral Fat Level} as string,\n\t\t{ Body Age} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> weight\nsource(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Housing complex'} as string,\n\t\t{ 'Gender'} as string,\n\t\t{ 'Birthday'} as string,\n\t\t{ 'Age'} as string,\n\t\t{ 'certification of care need'} as string,\n\t\t{ 'Number of residents'} as string,\n\t\t{ 'Height'} as string,\n\t\t{ 'Body weight'} as string,\n\t\t{ 'Stride（cm)'} as string,\n\t\t{ 'Medical history'} as string,\n\t\t{ 'Disease name'} as string,\n\t\t{ 'Regular hospital consultation'} as string,\n\t\t{ 'Antihypertensive'} as string,\n\t\t{ 'Other1'} as string,\n\t\t{ 'Smoking'} as string,\n\t\t{ 'Drinking'} as string,\n\t\t{ 'Family composition of living together'} as string,\n\t\t{  'Care need certification time'} as string,\n\t\t{ 'Hobby・preference・habit'} as string,\n\t\t{  'Activities'} as string,\n\t\t{ 'Community'} as string,\n\t\t{ 'Everyday'} as string,\n\t\t{ 'Everyday With or without blood pressure measurement'} as string,\n\t\t{ 'Whether or not to use a pedometer on a daily basis'} as string,\n\t\t{ 'Other2'} as string,\n\t\t{ 'right Measured value'} as string,\n\t\t{ 'right Evaluation'} as string,\n\t\t{ 'right Presence or absence of abnormality'} as string,\n\t\t{ 'left easured value'} as string,\n\t\t{ 'left Evaluation'} as string,\n\t\t{ 'left Presence or absence of abnormality'} as string,\n\t\t{ 'Locomotive Measured value'} as string,\n\t\t{ 'Locomotive Presence or absence of abnormality'                } as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sa01\nweight select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ BMI},\n\t\t{ Body Age},\n\t\tSubjectID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsa01 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Gender'},\n\t\t{ 'Age'},\n\t\t{ 'Height'},\n\t\t{ 'Body weight'},\n\t\t{ 'Smoking'},\n\t\t{ 'Drinking'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Select2 join(SubjectID == {'SubjectID'},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ BMI},\n\t\t{ Body Age},\n\t\tSubjectID,\n\t\t{ 'Gender'},\n\t\t{ 'Age'},\n\t\t{ 'Height'},\n\t\t{ 'Body weight'},\n\t\t{ 'Smoking'},\n\t\t{ 'Drinking'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> person\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weight')]",
				"[concat(variables('factoryId'), '/datasets/sa_01')]",
				"[concat(variables('factoryId'), '/datasets/person')]",
				"[concat(variables('factoryId'), '/datasets/time_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow7')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "active",
								"type": "DatasetReference"
							},
							"name": "active"
						},
						{
							"dataset": {
								"referenceName": "li_02",
								"type": "DatasetReference"
							},
							"name": "li02"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sleep_info",
								"type": "DatasetReference"
							},
							"name": "sleepInfo"
						},
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						}
					],
					"script": "source(output(\n\t\tDevice as string,\n\t\t{ SerialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Temperature} as string,\n\t\t{ Step} as string,\n\t\t{ Calorie} as string,\n\t\t{ Sleep State} as string,\n\t\t{ Sleep Hour} as string,\n\t\t{ Sleep Minute} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> active\nsource(output(\n\t\t{'No'} as string,\n\t\t{'SubjectID'} as string,\n\t\t{ 'Date confirmed'} as string,\n\t\t{ 'Appetite Questionnaire results'} as string,\n\t\t{'Eating habit Questionnaire results'} as string,\n\t\t{ 'Preference Questionnaire results'} as string,\n\t\t{ 'Sleep Questionnaire results'} as string,\n\t\t{'Anxiety about health Questionnaire results'} as string,\n\t\t{ 'Anxiety about forgetfulness Questionnaire results'} as string,\n\t\t{ 'I can go up and down stairs without being transmitted to the railing or wall'} as string,\n\t\t{ 'I can get up from the chair'} as string,\n\t\t{ 'I can walk for more than 15 minutes'} as string,\n\t\t{ 'I can walk without a cane'} as string,\n\t\t{ 'I am actively going out'} as string,\n\t\t{ 'Walking function Score'} as string,\n\t\t{ 'Walking function Evaluation'} as string,\n\t\t{ 'Do the cleaning and washing yourself'} as string,\n\t\t{ 'Shop for daily necessities yourself'} as string,\n\t\t{'I can prepare your own meals'} as string,\n\t\t{ 'I can write the documents to be submitted to the government office by myself'} as string,\n\t\t{ '自分で電話帳を調べ、電話をかけることができる'} as string,\n\t\t{ '生活機能 Score'} as string,\n\t\t{ '生活機能 Evaluation'} as string,\n\t\t{ 'I have a counselor in case of trouble'} as string,\n\t\t{ \"I have a counselor when I'm sick\"} as string,\n\t\t{ \"I have someone who will take me to the hospital when I'm sick\"} as string,\n\t\t{ 'There are people who take care of me when I fall asleep'} as string,\n\t\t{ 'Relying on someone'} as string,\n\t\t{ 'ソーシャルサポート Score'} as string,\n\t\t{ 'ソーシャルサポート Evaluation'} as string,\n\t\t{ 'No weight loss of more than 2-3 kg in the last 6 months'} as string,\n\t\t{ 'No weight gain of more than 2-3 kg in the last 2 months'} as string,\n\t\t{ 'I can eat hard food'} as string,\n\t\t{When I drink tea or soup, I don't get sick} as string,\n\t\t{I don't mind thirst} as string,\n\t\t{ '口腔・栄養 Score'} as string,\n\t\t{ '口腔・栄養 Evaluation'} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> li02\nactive select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ Sleep Hour},\n\t\t{ Sleep Minute},\n\t\tSubjectID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nli02 select(mapColumn(\n\t\t{'SubjectID'},\n\t\t{ 'Sleep Questionnaire results'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1, Select2 join(SubjectID == {'SubjectID'},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{ Measure Date Time},\n\t\t{ Sleep Hour},\n\t\t{ Sleep Minute},\n\t\tSubjectID,\n\t\t{ 'Sleep Questionnaire results'}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sleepInfo\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/active')]",
				"[concat(variables('factoryId'), '/datasets/li_02')]",
				"[concat(variables('factoryId'), '/datasets/sleep_info')]",
				"[concat(variables('factoryId'), '/datasets/time_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/active')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "71_sensing_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "activ.csv",
						"folderPath": "71_sensing_data",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Device",
						"type": "String"
					},
					{
						"name": " SerialNo",
						"type": "String"
					},
					{
						"name": " Battery Level",
						"type": "String"
					},
					{
						"name": " Measure Date Time",
						"type": "String"
					},
					{
						"name": " Temperature",
						"type": "String"
					},
					{
						"name": " Step",
						"type": "String"
					},
					{
						"name": " Calorie",
						"type": "String"
					},
					{
						"name": " Sleep State",
						"type": "String"
					},
					{
						"name": " Sleep Hour",
						"type": "String"
					},
					{
						"name": " Sleep Minute",
						"type": "String"
					},
					{
						"name": "SubjectID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/exist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "71_sensing_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "exist.csv",
						"folderPath": "71_sensing_data",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Device",
						"type": "String"
					},
					{
						"name": " Measure Date Time",
						"type": "String"
					},
					{
						"name": " Exist",
						"type": "String"
					},
					{
						"name": "SubjectID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow8')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "active",
								"type": "DatasetReference"
							},
							"name": "active"
						},
						{
							"dataset": {
								"referenceName": "exist",
								"type": "DatasetReference"
							},
							"name": "exist"
						},
						{
							"dataset": {
								"referenceName": "sphy",
								"type": "DatasetReference"
							},
							"name": "sphy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo"
						},
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo1"
						},
						{
							"dataset": {
								"referenceName": "time_info",
								"type": "DatasetReference"
							},
							"name": "timeInfo2"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						}
					],
					"script": "source(output(\n\t\tDevice as string,\n\t\t{ SerialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Temperature} as string,\n\t\t{ Step} as string,\n\t\t{ Calorie} as string,\n\t\t{ Sleep State} as string,\n\t\t{ Sleep Hour} as string,\n\t\t{ Sleep Minute} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> active\nsource(output(\n\t\tDevice as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Exist} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> exist\nsource(output(\n\t\tDevice as string,\n\t\t{ SerialNo} as string,\n\t\t{ Battery Level} as string,\n\t\t{ Measure Date Time} as string,\n\t\t{ Systolic Pressure} as string,\n\t\t{ Diastolic Pressure} as string,\n\t\t{ Mean Arterial Pressure} as string,\n\t\t{ Pulse Rate} as string,\n\t\t{ Irregular Pulse Flag} as string,\n\t\t{ Pulse Rate Range Detection Flag} as string,\n\t\tSubjectID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sphy\nactive select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nexist select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nsphy select(mapColumn(\n\t\t{ Measure Date Time}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo1\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> timeInfo2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/active')]",
				"[concat(variables('factoryId'), '/datasets/exist')]",
				"[concat(variables('factoryId'), '/datasets/sphy')]",
				"[concat(variables('factoryId'), '/datasets/time_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/behavior')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/medicine_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/internal_health_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/time_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blood_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/disease_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/person')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sleep_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "star_schema",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}